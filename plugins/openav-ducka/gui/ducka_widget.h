// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef ducka_widget_h
#define ducka_widget_h

#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
//#include "lv2/lv2plug.in/ns/extensions/ui/ui.h"
#include "DistrhoUI.hpp"

#include "avtk.h"
#include <stdio.h>
#include "header.c"

using namespace std;

// keep things inside the namespace to prevent issues with public symbols
START_NAMESPACE_DISTRHO

class DuckaUI {
public:
  void update_button(int button);
  DuckaUI(UI* const ui);
  Fl_Double_Window *window;
  Avtk::Image *headerImage;
private:
  void cb_headerImage_i(Avtk::Image*, void*);
  static void cb_headerImage(Avtk::Image*, void*);
public:
  Avtk::SidechainGain *graph;
private:
  void cb_graph_i(Avtk::SidechainGain*, void*);
  static void cb_graph(Avtk::SidechainGain*, void*);
public:
  Avtk::Dial *threshold;
private:
  void cb_threshold_i(Avtk::Dial*, void*);
  static void cb_threshold(Avtk::Dial*, void*);
public:
  Avtk::Dial *drop;
private:
  void cb_drop_i(Avtk::Dial*, void*);
  static void cb_drop(Avtk::Dial*, void*);
public:
  Avtk::Dial *time;
private:
  void cb_time_i(Avtk::Dial*, void*);
  static void cb_time(Avtk::Dial*, void*);
public:
  int getWidth();
  int getHeight();
private:
  UI* const ui;
  float gain;
  float cutoff;
  float Q;
public:
  void setHostParameter(uint32_t index, float value);
  void close_cb(Fl_Widget* o, void*);
};

END_NAMESPACE_DISTRHO

#endif
